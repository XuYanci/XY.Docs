import React, { Component } from "react";
class ModuleComponent extends Component {
  
     /** Life Cycle */
     constructor(props) {
        super(props);
        
        /// 状态管理
        this.state = {
            /// UI相关
         
            /// 业务相关
        
        }
        
        /// 静态参数传入 (非异步情况)
        if (props.var1) {
            this.var1 = props.var1;
        }
        
        /// 网络请求实体 (Using Object.assign)
        this.networkRequest = {
            Request1: {
                param1: 'p3',
                param2: 'p3',
                param3: 'p3',
            }
        }
        
        /// 网络响应实体 (Using Object.assign)
        this.networkResponse = {
            Response1: {
                param1: 'p1',
                param2: 'p2',
                param3: 'p3',
            }
        }
        
        /// !!! 不要在构造器做任何setstate，是无效的。
    }
    
      componentWillMount() {
        console.log('Component WILL MOUNT!')
        /// 外部参数传入 (可能是异步情况触发)
        if (this.props.var1) {
            this.var1 = this.props.var1; 
        }
        /// 初次网络请求
        
    }

    componentDidMount() {
        console.log('Component DID MOUNT!')
   
    }

    componentWillReceiveProps(newProps) {
        console.log('Component WILL RECEIVE PROPS!')
        
        /// 外部参数传入 (可能是异步情况触发)
        if (newProps.var1) {
            this.var1 = newProps.var1; 
        }
    }

    shouldComponentUpdate(newProps, newState) {
        /// 判断是否需要更新触发Render
        return true;
    }

    componentWillUpdate(nextProps, nextState) {
        console.log('Component WILL UPDATE!');
    }

    componentDidUpdate(prevProps, prevState) {
        console.log('Component DID UPDATE!')
    }

    componentWillUnmount() {
        console.log('Component WILL UNMOUNT!')
    }
    
    render() {
       
        return (
            <div>
              
            </div>
        );
    }
     /**  User Events */
     /** Functions */
}

ModuleComponent.propTypes = {
}

export default  ModuleComponent;

/// Connect - Reducer - Store


页面传参数:
componentWillMount() {
    // 获取从上一页传过来的参数
}

参数传递 （父亲->子) ： 
判断是否为空，为空则默认赋值
