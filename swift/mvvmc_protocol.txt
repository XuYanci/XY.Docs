MVVMC 
M. VM. View/Controller


    


   View/Controller   ->     
				 VM.  ->     M.

		     <~ 


V/C Owns VM  ,  it can set VM properties 
VM delegate callback to V/C , just notify update ui or prompt message, show loading.
VM owns Model 

It has only on protocol between V/C and VM 

VM Protocols contain 
UI Model change, Callback V/C
motion pic , showloading hide loading show error , hide error . Show success . Callback V/C

Model protocol contain 
Model change, Callback VM
Network Request, Json to Model, Callback VM


Router .  Do nothing , just use routable to jump .

Every module has its own router, jump to where â€¦ 

/////////////////////////////// Example /////////////////////////////// 


/// Model
protocol MVVMBaseRespModel {
    var code:String?    {get  set}
    var message:String? {get set}
    static func buildModelWithDict(dict:JSON) -> AnyObject
    
}

extension MVVMBaseRespModel {
    var code:String? {
        get {
            return code == nil ? "-1" : code
        }
    }
    
    var message:String? {
        get {
            return message == nil ? "" : message
        }
    }
}
 

protocol MVVMStatusupModel:MVVMBaseRespModel {
    
}

/// ModelInterface
/// Callback to view model
protocol MVVMModuleModel:class {
     func statusup(tel: String,completeHandle:@escaping ((_ statusUpModel:TDPStatusUpModel)-> Void))
}

/// ViewModelInterface
/// Owns model
protocol MVVMModuleViewModel:class {
    var model:MVVMTDPInputMobileModel? {get set}
    weak var delegate:MVVMTDPInputMobileViewDelegate? {get set}
    /// Funcs define here call by view/controller   
}

/// ViewInterface
/// Owns view model
protocol MVVMModuleViewDelegate:class {
    var viewModel:MVVMTDPInputMobileViewModel? {get set}   
    /// Functions define here call by view module
}




